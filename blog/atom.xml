<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://sethirajat.com</id>
  <title>Rajat Sethi</title>
  <updated>2021-03-03T12:02:27.269773+00:00</updated>
  <link href="https://sethirajat.com"/>
  <link href="https://sethirajat.com/blog/atom.xml"/>
  <generator uri="https://ablog.readthedocs.org" version="0.10.13">ABlog</generator>
  <entry>
    <id>https://sethirajat.com/blog/blogging-with-python-sphinx.html</id>
    <title>Blogging with Python’s Sphinx</title>
    <updated>2021-02-01T00:00:00-05:00</updated>
    <author>
      <name>Rajat Sethi</name>
    </author>
    <content type="html">&lt;p&gt;Sphinx is a document generator tool which was originally written for generating Python documentation. Sphinx uses reStructuredText as its markup language but you can write in markdown too.&lt;/p&gt;
&lt;p&gt;I have created this blog using &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt; and its related technologies with inspiration from &lt;a class="reference external" href="https://predictablynoisy.com/posts/2020/sphinx-blogging/"&gt;Predictably Noisy&lt;/a&gt;. While there are many static site generators available such as Hugo, Jekyll and others I am familiar with Python’s ecosystem the most which led to my decision of using Sphinx. The bonus is that using &lt;a class="reference external" href="https://myst-nb.readthedocs.io/en/latest/"&gt;myst_nb&lt;/a&gt; or &lt;a class="reference external" href="http://nbsphinx.readthedocs.io/"&gt;nbsphinx&lt;/a&gt; &lt;a class="reference external" href="https://jupyter.org/"&gt;Jupyter notebooks&lt;/a&gt; can be directly rendered into articles or pages for the website. As per my knowledge none of the other popular static site generators provide ability to render Jupyter notebooks directly into blog posts. In addition to that Sphinx gives you a rich markup to write your articles.&lt;/p&gt;
&lt;img alt="https://www.sphinx-doc.org/en/master/_static/sphinxheader.png" class="bg-dark" src="https://www.sphinx-doc.org/en/master/_static/sphinxheader.png" /&gt;
</content>
    <link href="https://sethirajat.com/blog/blogging-with-python-sphinx.html" rel="alternate"/>
    <published>2021-02-01T00:00:00-05:00</published>
  </entry>
  <entry>
    <id>https://sethirajat.com/blog/pandas-cheatsheet.html</id>
    <title>Pandas cheatsheet</title>
    <updated>2021-02-25T00:00:00-05:00</updated>
    <author>
      <name>Rajat Sethi</name>
    </author>
    <content type="html">&lt;p&gt;This cheatsheet lists out important and most used pandas functionality.&lt;/p&gt;
&lt;p&gt;Pandas input and output functions.&lt;/p&gt;
</content>
    <link href="https://sethirajat.com/blog/pandas-cheatsheet.html" rel="alternate"/>
    <published>2021-02-25T00:00:00-05:00</published>
  </entry>
  <entry>
    <id>https://sethirajat.com/blog/first-class-functions-in-python.html</id>
    <title>First Class Functions in Python</title>
    <updated>2021-03-02T00:00:00-05:00</updated>
    <author>
      <name>Rajat Sethi</name>
    </author>
    <content type="html">&lt;p&gt;A language is set to support first class functions when they can be treated like any other value. You can pass them to functions as arguments, return them from functions, and save them in variables.&lt;/p&gt;
&lt;p&gt;First-class functions are important because they’re a basic requirement for writing higher-level abstractions with functions. First class functions are used in various abstractions like closures, decorator and more. First class functions also facilitate metaprogramming.&lt;/p&gt;
</content>
    <link href="https://sethirajat.com/blog/first-class-functions-in-python.html" rel="alternate"/>
    <published>2021-03-02T00:00:00-05:00</published>
  </entry>
</feed>
